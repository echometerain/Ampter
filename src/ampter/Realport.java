/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ampter;

import java.awt.image.*;
import java.awt.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import java.time.*;

/**
 *
 * @author hhwl
 */
public class Realport extends javax.swing.JPanel implements Runnable {

    static int delta = 25;
    static Ampter parent;
    boolean dragging = false;
    int dragFromX = 0;
    int dragFromY = 0;

    /**
     * Creates new form Realport
     *
     * @param parent
     */
    public Realport(Ampter parent) {
        initComponents();
        Realport.parent = parent;
    }

    // draw realport
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        // quit if no audio
        if (!Ampter.isAudioLoaded()) {
            return;
        }
        // get needed variables
        int ppb = Ampter.getPpb();
        int num_bl = Ampter.getNum_bl();
        int leftBlock = Math.max(Ampter.getViewLeft() / ppb - 2, 0); // -2 & +2 for smooth scrolling
        int rightBlock = Math.min(Ampter.getViewRight() / ppb + 2, num_bl);
        int viewHeight = Ampter.getViewHeight();
        BufferedImage[][] specs = Ampter.getSpecs();

        // paint the specs block by block
        for (int i = leftBlock; i <= rightBlock; i++) {
            if (specs[0][i] != null && specs[1][i] != null) {
                // draw specs with opacity determined by slider level
                ((Graphics2D) g).setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, (float) parent.getLeftSliderLevel()));
                g.drawImage(specs[0][i], i * ppb, 0, ppb, viewHeight, this);
                ((Graphics2D) g).setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, (float) parent.getRightSliderLevel()));
                g.drawImage(specs[1][i], i * ppb, 0, ppb, viewHeight, this);
            }
        }
    }

    @Override
    public void run() {
        // make tooltip never go away
        ToolTipManager.sharedInstance().setDismissDelay(Integer.MAX_VALUE);
        while (true) {
            // redraw every frame
            repaint();
            try {
                // frame pause
                Thread.sleep(delta);
            } catch (InterruptedException ex) {
                Logger.getLogger(Realport.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (!dragging) {
            Point pos = this.getMousePosition();
            dragFromX = pos.x;
            dragFromY = pos.y;
        }
        dragging = true;
    }//GEN-LAST:event_formMouseDragged

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // write tooltip info
        Point pos = this.getMousePosition();
        if (pos != null) {
            this.setToolTipText(Ampter.freqInfo(Ampter.pixToFreq(pos.y)));
        }
    }//GEN-LAST:event_formMouseMoved

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        dragging = false;
        dragFromX = 0;
        dragFromY = 0;
    }//GEN-LAST:event_formMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
